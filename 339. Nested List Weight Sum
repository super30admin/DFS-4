# """
# This is the interface that allows for creating nested lists.
# You should not implement it, or speculate about its implementation
# """
#class NestedInteger:
#    def __init__(self, value=None):
#        """
#        If value is not specified, initializes an empty list.
#        Otherwise initializes a single integer equal to value.
#        """
#
#    def isInteger(self):
#        """
#        @return True if this NestedInteger holds a single integer, rather than a nested list.
#        :rtype bool
#        """
#
#    def add(self, elem):
#        """
#        Set this NestedInteger to hold a nested list and adds a nested integer elem to it.
#        :rtype void
#        """
#
#    def setInteger(self, value):
#        """
#        Set this NestedInteger to hold a single integer equal to value.
#        :rtype void
#        """
#
#    def getInteger(self):
#        """
#        @return the single integer that this NestedInteger holds, if it holds a single integer
#        Return None if this NestedInteger holds a nested list
#        :rtype int
#        """
#
#    def getList(self):
#        """
#        @return the nested list that this NestedInteger holds, if it holds a nested list
#        Return None if this NestedInteger holds a single integer
#        :rtype List[NestedInteger]
#        """

class Solution:
    
    def fun(self, nestedList, level):
        result = 0;
        for num in nestedList:
            # check whether current element is interger or list
            #if the current element is integer, add that to the result
            # else call the same function on the current element
            if(num.isInteger()):
                result += num.getInteger() * level
            else:
                result += self.fun(num.getList(), level + 1);
        return result;
    
    def depthSum(self, nestedList: List[NestedInteger]) -> int:
        return self.fun(nestedList, 1);
        '''
        d = sum of depths of all the elements
        n = number of elements
        time complexity = O(d + n)
        space complexity = O(1)
        '''
        
